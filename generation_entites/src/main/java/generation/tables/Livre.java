/*
 * This file is generated by jOOQ.
 */
package generation.tables;


import generation.Keys;
import generation.Public;
import generation.tables.records.LivreRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Livre extends TableImpl<LivreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.livre</code>
     */
    public static final Livre LIVRE = new Livre();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LivreRecord> getRecordType() {
        return LivreRecord.class;
    }

    /**
     * The column <code>public.livre.id</code>.
     */
    public final TableField<LivreRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.livre.nom</code>.
     */
    public final TableField<LivreRecord, String> NOM = createField(DSL.name("nom"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.livre.langue</code>.
     */
    public final TableField<LivreRecord, String> LANGUE = createField(DSL.name("langue"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.livre.id_auteur</code>.
     */
    public final TableField<LivreRecord, Integer> ID_AUTEUR = createField(DSL.name("id_auteur"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.livre.id_profil</code>.
     */
    public final TableField<LivreRecord, Integer> ID_PROFIL = createField(DSL.name("id_profil"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.livre.id_stock</code>.
     */
    public final TableField<LivreRecord, Integer> ID_STOCK = createField(DSL.name("id_stock"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.livre.prix</code>.
     */
    public final TableField<LivreRecord, Integer> PRIX = createField(DSL.name("prix"), SQLDataType.INTEGER.nullable(false), this, "");

    private Livre(Name alias, Table<LivreRecord> aliased) {
        this(alias, aliased, null);
    }

    private Livre(Name alias, Table<LivreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.livre</code> table reference
     */
    public Livre(String alias) {
        this(DSL.name(alias), LIVRE);
    }

    /**
     * Create an aliased <code>public.livre</code> table reference
     */
    public Livre(Name alias) {
        this(alias, LIVRE);
    }

    /**
     * Create a <code>public.livre</code> table reference
     */
    public Livre() {
        this(DSL.name("livre"), null);
    }

    public <O extends Record> Livre(Table<O> child, ForeignKey<O, LivreRecord> key) {
        super(child, key, LIVRE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LivreRecord, Integer> getIdentity() {
        return (Identity<LivreRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LivreRecord> getPrimaryKey() {
        return Keys.LIVRE_PKEY;
    }

    @Override
    public List<UniqueKey<LivreRecord>> getKeys() {
        return Arrays.<UniqueKey<LivreRecord>>asList(Keys.LIVRE_PKEY, Keys.LIVRE_NOM_KEY);
    }

    @Override
    public List<ForeignKey<LivreRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LivreRecord, ?>>asList(Keys.LIVRE__FK_LIVRE_AUTEUR, Keys.LIVRE__FK_LIVRE_PROFIL, Keys.LIVRE__ID_STOCK);
    }

    private transient Auteur _auteur;
    private transient Profil _profil;
    private transient Stock _stock;

    public Auteur auteur() {
        if (_auteur == null)
            _auteur = new Auteur(this, Keys.LIVRE__FK_LIVRE_AUTEUR);

        return _auteur;
    }

    public Profil profil() {
        if (_profil == null)
            _profil = new Profil(this, Keys.LIVRE__FK_LIVRE_PROFIL);

        return _profil;
    }

    public Stock stock() {
        if (_stock == null)
            _stock = new Stock(this, Keys.LIVRE__ID_STOCK);

        return _stock;
    }

    @Override
    public Livre as(String alias) {
        return new Livre(DSL.name(alias), this);
    }

    @Override
    public Livre as(Name alias) {
        return new Livre(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Livre rename(String name) {
        return new Livre(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Livre rename(Name name) {
        return new Livre(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
