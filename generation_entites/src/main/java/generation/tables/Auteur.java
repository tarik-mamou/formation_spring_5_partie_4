/*
 * This file is generated by jOOQ.
 */
package generation.tables;


import generation.Keys;
import generation.Public;
import generation.tables.records.AuteurRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Auteur extends TableImpl<AuteurRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.AUTEUR</code>
     */
    public static final Auteur AUTEUR = new Auteur();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuteurRecord> getRecordType() {
        return AuteurRecord.class;
    }

    /**
     * The column <code>PUBLIC.AUTEUR.ID</code>.
     */
    public final TableField<AuteurRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.AUTEUR.NOM</code>.
     */
    public final TableField<AuteurRecord, String> NOM = createField(DSL.name("NOM"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.AUTEUR.PRENOM</code>.
     */
    public final TableField<AuteurRecord, String> PRENOM = createField(DSL.name("PRENOM"), SQLDataType.VARCHAR(64), this, "");

    private Auteur(Name alias, Table<AuteurRecord> aliased) {
        this(alias, aliased, null);
    }

    private Auteur(Name alias, Table<AuteurRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.AUTEUR</code> table reference
     */
    public Auteur(String alias) {
        this(DSL.name(alias), AUTEUR);
    }

    /**
     * Create an aliased <code>PUBLIC.AUTEUR</code> table reference
     */
    public Auteur(Name alias) {
        this(alias, AUTEUR);
    }

    /**
     * Create a <code>PUBLIC.AUTEUR</code> table reference
     */
    public Auteur() {
        this(DSL.name("AUTEUR"), null);
    }

    public <O extends Record> Auteur(Table<O> child, ForeignKey<O, AuteurRecord> key) {
        super(child, key, AUTEUR);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AuteurRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    @Override
    public List<UniqueKey<AuteurRecord>> getKeys() {
        return Arrays.<UniqueKey<AuteurRecord>>asList(Keys.CONSTRAINT_7);
    }

    @Override
    public Auteur as(String alias) {
        return new Auteur(DSL.name(alias), this);
    }

    @Override
    public Auteur as(Name alias) {
        return new Auteur(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Auteur rename(String name) {
        return new Auteur(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Auteur rename(Name name) {
        return new Auteur(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
