/*
 * This file is generated by jOOQ.
 */
package generation.tables;


import generation.Keys;
import generation.Public;
import generation.tables.records.UserLivreRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserLivre extends TableImpl<UserLivreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_livre</code>
     */
    public static final UserLivre USER_LIVRE = new UserLivre();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserLivreRecord> getRecordType() {
        return UserLivreRecord.class;
    }

    /**
     * The column <code>public.user_livre.id_livre</code>.
     */
    public final TableField<UserLivreRecord, Integer> ID_LIVRE = createField(DSL.name("id_livre"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.user_livre.id_user</code>.
     */
    public final TableField<UserLivreRecord, Integer> ID_USER = createField(DSL.name("id_user"), SQLDataType.INTEGER.nullable(false), this, "");

    private UserLivre(Name alias, Table<UserLivreRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserLivre(Name alias, Table<UserLivreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_livre</code> table reference
     */
    public UserLivre(String alias) {
        this(DSL.name(alias), USER_LIVRE);
    }

    /**
     * Create an aliased <code>public.user_livre</code> table reference
     */
    public UserLivre(Name alias) {
        this(alias, USER_LIVRE);
    }

    /**
     * Create a <code>public.user_livre</code> table reference
     */
    public UserLivre() {
        this(DSL.name("user_livre"), null);
    }

    public <O extends Record> UserLivre(Table<O> child, ForeignKey<O, UserLivreRecord> key) {
        super(child, key, USER_LIVRE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<UserLivreRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserLivreRecord, ?>>asList(Keys.USER_LIVRE__FK_USER_LIVRE_LIVRE, Keys.USER_LIVRE__FK_USER_LIVRE_USER);
    }

    private transient Livre _livre;
    private transient ApplicationUser _applicationUser;

    public Livre livre() {
        if (_livre == null)
            _livre = new Livre(this, Keys.USER_LIVRE__FK_USER_LIVRE_LIVRE);

        return _livre;
    }

    public ApplicationUser applicationUser() {
        if (_applicationUser == null)
            _applicationUser = new ApplicationUser(this, Keys.USER_LIVRE__FK_USER_LIVRE_USER);

        return _applicationUser;
    }

    @Override
    public UserLivre as(String alias) {
        return new UserLivre(DSL.name(alias), this);
    }

    @Override
    public UserLivre as(Name alias) {
        return new UserLivre(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserLivre rename(String name) {
        return new UserLivre(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserLivre rename(Name name) {
        return new UserLivre(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
