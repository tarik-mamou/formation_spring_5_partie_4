/*
 * This file is generated by jOOQ.
 */
package generation.tables;


import generation.Keys;
import generation.Public;
import generation.tables.records.ProfilRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Profil extends TableImpl<ProfilRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.PROFIL</code>
     */
    public static final Profil PROFIL = new Profil();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfilRecord> getRecordType() {
        return ProfilRecord.class;
    }

    /**
     * The column <code>PUBLIC.PROFIL.ID</code>.
     */
    public final TableField<ProfilRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PROFIL.DATE_PUBLICATION</code>.
     */
    public final TableField<ProfilRecord, LocalDate> DATE_PUBLICATION = createField(DSL.name("DATE_PUBLICATION"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>PUBLIC.PROFIL.GENRE</code>.
     */
    public final TableField<ProfilRecord, String> GENRE = createField(DSL.name("GENRE"), SQLDataType.VARCHAR(64), this, "");

    private Profil(Name alias, Table<ProfilRecord> aliased) {
        this(alias, aliased, null);
    }

    private Profil(Name alias, Table<ProfilRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.PROFIL</code> table reference
     */
    public Profil(String alias) {
        this(DSL.name(alias), PROFIL);
    }

    /**
     * Create an aliased <code>PUBLIC.PROFIL</code> table reference
     */
    public Profil(Name alias) {
        this(alias, PROFIL);
    }

    /**
     * Create a <code>PUBLIC.PROFIL</code> table reference
     */
    public Profil() {
        this(DSL.name("PROFIL"), null);
    }

    public <O extends Record> Profil(Table<O> child, ForeignKey<O, ProfilRecord> key) {
        super(child, key, PROFIL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProfilRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8;
    }

    @Override
    public List<UniqueKey<ProfilRecord>> getKeys() {
        return Arrays.<UniqueKey<ProfilRecord>>asList(Keys.CONSTRAINT_8);
    }

    @Override
    public Profil as(String alias) {
        return new Profil(DSL.name(alias), this);
    }

    @Override
    public Profil as(Name alias) {
        return new Profil(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Profil rename(String name) {
        return new Profil(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Profil rename(Name name) {
        return new Profil(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, LocalDate, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
