/*
 * This file is generated by jOOQ.
 */
package generation.tables;


import generation.Keys;
import generation.Public;
import generation.tables.records.StockRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Stock extends TableImpl<StockRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.stock</code>
     */
    public static final Stock STOCK = new Stock();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StockRecord> getRecordType() {
        return StockRecord.class;
    }

    /**
     * The column <code>public.stock.id</code>.
     */
    public final TableField<StockRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.stock.nombre</code>.
     */
    public final TableField<StockRecord, Integer> NOMBRE = createField(DSL.name("nombre"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private Stock(Name alias, Table<StockRecord> aliased) {
        this(alias, aliased, null);
    }

    private Stock(Name alias, Table<StockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.stock</code> table reference
     */
    public Stock(String alias) {
        this(DSL.name(alias), STOCK);
    }

    /**
     * Create an aliased <code>public.stock</code> table reference
     */
    public Stock(Name alias) {
        this(alias, STOCK);
    }

    /**
     * Create a <code>public.stock</code> table reference
     */
    public Stock() {
        this(DSL.name("stock"), null);
    }

    public <O extends Record> Stock(Table<O> child, ForeignKey<O, StockRecord> key) {
        super(child, key, STOCK);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<StockRecord, Integer> getIdentity() {
        return (Identity<StockRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<StockRecord> getPrimaryKey() {
        return Keys.STOCK_PKEY;
    }

    @Override
    public List<UniqueKey<StockRecord>> getKeys() {
        return Arrays.<UniqueKey<StockRecord>>asList(Keys.STOCK_PKEY);
    }

    @Override
    public Stock as(String alias) {
        return new Stock(DSL.name(alias), this);
    }

    @Override
    public Stock as(Name alias) {
        return new Stock(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stock rename(String name) {
        return new Stock(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stock rename(Name name) {
        return new Stock(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
