/*
 * This file is generated by jOOQ.
 */
package generation.tables;


import generation.Keys;
import generation.Public;
import generation.tables.records.ApplicationUserRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApplicationUser extends TableImpl<ApplicationUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.application_user</code>
     */
    public static final ApplicationUser APPLICATION_USER = new ApplicationUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApplicationUserRecord> getRecordType() {
        return ApplicationUserRecord.class;
    }

    /**
     * The column <code>public.application_user.id</code>.
     */
    public final TableField<ApplicationUserRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.application_user.username</code>.
     */
    public final TableField<ApplicationUserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.application_user.nom</code>.
     */
    public final TableField<ApplicationUserRecord, String> NOM = createField(DSL.name("nom"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.application_user.password</code>.
     */
    public final TableField<ApplicationUserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.application_user.mail</code>.
     */
    public final TableField<ApplicationUserRecord, String> MAIL = createField(DSL.name("mail"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.application_user.actif</code>.
     */
    public final TableField<ApplicationUserRecord, Boolean> ACTIF = createField(DSL.name("actif"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    private ApplicationUser(Name alias, Table<ApplicationUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApplicationUser(Name alias, Table<ApplicationUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.application_user</code> table reference
     */
    public ApplicationUser(String alias) {
        this(DSL.name(alias), APPLICATION_USER);
    }

    /**
     * Create an aliased <code>public.application_user</code> table reference
     */
    public ApplicationUser(Name alias) {
        this(alias, APPLICATION_USER);
    }

    /**
     * Create a <code>public.application_user</code> table reference
     */
    public ApplicationUser() {
        this(DSL.name("application_user"), null);
    }

    public <O extends Record> ApplicationUser(Table<O> child, ForeignKey<O, ApplicationUserRecord> key) {
        super(child, key, APPLICATION_USER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ApplicationUserRecord, Integer> getIdentity() {
        return (Identity<ApplicationUserRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ApplicationUserRecord> getPrimaryKey() {
        return Keys.USER_PKEY;
    }

    @Override
    public List<UniqueKey<ApplicationUserRecord>> getKeys() {
        return Arrays.<UniqueKey<ApplicationUserRecord>>asList(Keys.USER_PKEY);
    }

    @Override
    public ApplicationUser as(String alias) {
        return new ApplicationUser(DSL.name(alias), this);
    }

    @Override
    public ApplicationUser as(Name alias) {
        return new ApplicationUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicationUser rename(String name) {
        return new ApplicationUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicationUser rename(Name name) {
        return new ApplicationUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, String, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
